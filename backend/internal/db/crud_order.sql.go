// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: crud_order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_name, customer_lastname, adress, event_date, total_price)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateOrderParams struct {
	CustomerName     string           `json:"customer_name"`
	CustomerLastname string           `json:"customer_lastname"`
	Adress           string           `json:"adress"`
	EventDate        pgtype.Timestamp `json:"event_date"`
	TotalPrice       pgtype.Numeric   `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerName,
		arg.CustomerLastname,
		arg.Adress,
		arg.EventDate,
		arg.TotalPrice,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

type CreateOrderItemsParams struct {
	OrderID  *int32         `json:"order_id"`
	DishID   *int32         `json:"dish_id"`
	Quantity int32          `json:"quantity"`
	Total    pgtype.Numeric `json:"total"`
}

const getFullOrderInfo = `-- name: GetFullOrderInfo :many
SELECT 
    o.id AS order_id, 
    o.customer_name, 
    o.customer_lastname, 
    o.adress, 
    o.event_date, 
    o.created_at, 
    i.dish_id, 
    d.name AS dish_name, 
    i.quantity, 
    i.total AS item_total
FROM orders o
JOIN order_items i
ON o.id = i.order_id
JOIN dishes d 
ON i.dish_id = d.id
WHERE o.id = $1
`

type GetFullOrderInfoRow struct {
	OrderID          int32            `json:"order_id"`
	CustomerName     string           `json:"customer_name"`
	CustomerLastname string           `json:"customer_lastname"`
	Adress           string           `json:"adress"`
	EventDate        pgtype.Timestamp `json:"event_date"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	DishID           *int32           `json:"dish_id"`
	DishName         string           `json:"dish_name"`
	Quantity         int32            `json:"quantity"`
	ItemTotal        pgtype.Numeric   `json:"item_total"`
}

func (q *Queries) GetFullOrderInfo(ctx context.Context, id int32) ([]GetFullOrderInfoRow, error) {
	rows, err := q.db.Query(ctx, getFullOrderInfo, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetFullOrderInfoRow{}
	for rows.Next() {
		var i GetFullOrderInfoRow
		if err := rows.Scan(
			&i.OrderID,
			&i.CustomerName,
			&i.CustomerLastname,
			&i.Adress,
			&i.EventDate,
			&i.CreatedAt,
			&i.DishID,
			&i.DishName,
			&i.Quantity,
			&i.ItemTotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
