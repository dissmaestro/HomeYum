// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: crud_dishes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllDishes = `-- name: GetAllDishes :many
SELECT id, name, description, image_url, price
FROM dishes
`

func (q *Queries) GetAllDishes(ctx context.Context) ([]Dish, error) {
	rows, err := q.db.Query(ctx, getAllDishes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dish{}
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDishByID = `-- name: GetDishByID :one
SELECT id, name, description, image_url, price
FROM dishes
WHERE
    id = $1
`

func (q *Queries) GetDishByID(ctx context.Context, id int32) (Dish, error) {
	row := q.db.QueryRow(ctx, getDishByID, id)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Price,
	)
	return i, err
}

const getDishesByCategory = `-- name: GetDishesByCategory :many
SELECT d.id, d.name, d.description, d.image_url, d.price
FROM dishes d
JOIN dish_categories dc ON d.id = dc.dish_id
JOIN categories c ON dc.category_id = c.id
WHERE c.name = $1
`

func (q *Queries) GetDishesByCategory(ctx context.Context, categoryName string) ([]Dish, error) {
	rows, err := q.db.Query(ctx, getDishesByCategory, categoryName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dish{}
	for rows.Next() {
		var i Dish
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDish = `-- name: InsertDish :one
insert into dishes (name, description, image_url, price)
values ($1, $2, $3, $4)
RETURNING id, name, description, image_url, price
`

type InsertDishParams struct {
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	ImageUrl    *string        `json:"image_url"`
	Price       pgtype.Numeric `json:"price"`
}

func (q *Queries) InsertDish(ctx context.Context, arg InsertDishParams) (Dish, error) {
	row := q.db.QueryRow(ctx, insertDish,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.Price,
	)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Price,
	)
	return i, err
}

const updateDishByID = `-- name: UpdateDishByID :one
UPDATE dishes
SET
    name = $1,
    description = $2,
    image_url = $3,
    price = $4
WHERE
    id = $5
RETURNING id, name, description, image_url, price
`

type UpdateDishByIDParams struct {
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	ImageUrl    *string        `json:"image_url"`
	Price       pgtype.Numeric `json:"price"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateDishByID(ctx context.Context, arg UpdateDishByIDParams) (Dish, error) {
	row := q.db.QueryRow(ctx, updateDishByID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.Price,
		arg.ID,
	)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.Price,
	)
	return i, err
}
