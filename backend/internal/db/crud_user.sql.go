// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: crud_user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password)
VALUES ($1, $2)
RETURNING id, name, password, created_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE name=@name
RETURNING id, name, password, created_at
`

func (q *Queries) DeleteUser(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getPassByName = `-- name: GetPassByName :one
SELECT password
FROM users
WHERE
    name = $1
`

func (q *Queries) GetPassByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getPassByName, name)
	var password string
	err := row.Scan(&password)
	return password, err
}
